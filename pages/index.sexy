
<div class="columns">
    <div class="column is-one-fifth" style="width: 300px; background-color: #f9f9f9; padding: 40px;">
        <aside class="menu">
			@each(header in Object.keys(items))
			<p class="menu-label" :key="header">
                {{ header }}
            </p>
            <ul class="menu-list">
            @each(item in items[header])
            <div :active="isActive(header, item.name)" :name="item.name" :items="item.items" :key="item.name" @change="goTo(header, event)"></div>
			@endeach
			</ul>
			@endeach
        </aside>
    </div>
    <div class="column">
        <section class="section">
            <div class="container" style="padding-bottom: 20px;">
                <nav class="breadcrumb" aria-label="breadcrumbs">
                    <ul>
                        
                    </ul>
                </nav>
            </div>
           a
        </section>
    </div>
</div>



<script>
let items = {
	'intro': [
		{
			name: 'Get started',
			items: [],
		}, {
			name: 'Installation',
			items: ['Framework', 'Server-side render']
		}
	],
	'Single file components': [
		{
			name: "Introduction",
			items: [],
		}, {
			name: "Reactivity",
			items: ['Observables', 'Computeds', 'Watches'],
		}, {
			name: "Template syntax",
			items: ['Text', 'Attributes', 'Using JavaScript Expressions', 'Directives'],
		}
	],
	'Templates': [
		{
			name: "Class binding",
			items: ['Object syntax', 'Array syntax'],
		}, {
			name: "Style binding",
			items: ['Object syntax', 'Array syntax'],
		}, {
			name: "Conditional rendering",
			items: ['Conditional groups', 'Mixed rendering'],
		}, {
			name: "List rendering",
			items: [],
		}, {
			name: "Events",
			items: ['Handlers', 'Inline handlers', 'Why listeners in HTML'],
		}, {
			name: "Form input binding",
			items: ['Input', 'Textarea', 'Radio', 'Checkbox', 'Select'],
		}, {
			name: "Directives",
			items: ['Usage', 'Custom directive'],
		}
	],
	'Components': [
		{
			name: "Usage",
			items: [],
		}, {
			name: "Properties",
			items: [],
		}, {
			name: "Events",
			items: [],
		}, {
			name: "Slots",
			items: ['Named slots', 'Notag option']
		}, {
			name: "Dynamic components",
			items: [],
		}, {
			name: "Lazy load components",
			items: [],
		}, {
			name: "Magic variables",
			items: ['References', 'Parent', 'Element', 'Render', 'Props']
		} 
	],
	'Transitions': [
		{
			name: "Class based",
			items: [],
		}, {
			name: "Custom transition",
			items: [],
		}
	],
	'Server-side rendering': [
		{
			name: "Get started",
			items: [],
		}, {
			name: "Layouts",
			items: [],
		}, {
			name: "Pages",
			items: ['Routing', 'Layouts'],
		}, {
			name: "Config",
			items: ['CSS entrypoints', 'Webpack']
		}, {
			name: "Static website",
			items: [],
		}, {
			name: "Advanced",
			items: ['Custom server']
		}, 
	],
}

function isActive(dir, name) 
{
	let lastRoute = $router.lastRouteResolved();

	if(!lastRoute) {
		lastRoute = { url: '/' };
	}

	let [ routeDir, routeName ] = lastRoute.url.replace(/^\/docs\//g, '').split('/');

	dir = dir.toLowerCase().replace(/\s/g, '-');
	name = name.toLowerCase().replace(/\s/g, '-');
	
	if(routeDir === dir && routeName === name) {
		return true;
	}

	return false;
}

function goTo(dir, event) {
	let [ pageName, paragraph ] = event.detail;

	dir = dir.toLowerCase().replace(/\s/g, '-');

	let page = pageName.toLowerCase().replace(/\s/g, '-');

	console.log(dir, page, paragraph);

	$router.navigate(`/docs/${dir}/${page}`);
}
</script>